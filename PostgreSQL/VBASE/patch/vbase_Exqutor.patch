diff --git a/src/hnswindex.cpp b/src/hnswindex.cpp
index ecc1bcc..5b4cc86 100644
--- a/src/hnswindex.cpp
+++ b/src/hnswindex.cpp
@@ -17,6 +17,23 @@ extern "C"
 #include <utils/rel.h>
 #include <utils/selfuncs.h>
 #include <access/reloptions.h>
+#include "utils/memutils.h"
+
+}
+
+#include "index.hpp"
+
+
+static List * search_number = NIL;
+static List * search_distance = NIL;
+// static int count = 0;
+static bool need_to_search = true;
+
+
+// Helper function to append a uint64 value to a PostgreSQL List
+static List* lappend_uint64(List* list, uint64 value)
+{
+    return lappend(list, (void*)value);
 }
 
 extern relopt_kind hnsw_para_relopt_kind;
@@ -268,10 +285,79 @@ bool hnsw_gettuple(IndexScanDesc scan, ScanDirection dir)
      * Index can be used to scan backward, but Postgres doesn't support
      * backward scan on operators
      */
+    
     Assert(ScanDirectionIsForward(dir));
+    // if (reuse_computation == false)
+    // {
+    //     MemoryContext oldCtx = MemoryContextSwitchTo(CacheMemoryContext);
+	// 	if (search_number != NIL)
+    //     {
+            
+    //         need_to_search = false;
+    //         auto first = list_head(search_number);
+    //         if (first != NULL)
+    //         {
+    //             std::uint64_t number = (std::uint64_t) lfirst(first);
+    //             search_number = list_delete_first(search_number);
+    //             BlockNumber blkno = (std::uint32_t)(number >> 32);
+    //             OffsetNumber offset = (std::uint32_t)number;
+    //         #if PG_VERSION_NUM >= 120000
+    //             ItemPointerSet(&scan->xs_heaptid, blkno, offset);
+    //         #else
+    //             ItemPointerSet(&scan->xs_ctup.t_self, blkno, offset);
+    //         #endif
+    //             if (search_distance != NIL)
+    //             {
+    //                 auto dist_first = list_head(search_distance);
+    //                 if (dist_first != NULL)
+    //                 {
+    //                     scan->xs_orderbyvals[0] = (Datum) lfirst(dist_first);
+    //                     search_distance = list_delete_first(search_distance);
+    //                 }
+    //                 else
+    //                 {
+    //                     scan->xs_orderbyvals[0] = Float4GetDatum(0.0);
+    //                 }
+    //             }
+    //             else
+    //             {
+    //                 scan->xs_orderbyvals[0] = Float4GetDatum(0.0);
+    //             }
+    //             scan->xs_orderbynulls[0] = false;
+    //             scan->xs_recheckorderby = false;
+    //             // count++;
+    //             MemoryContextSwitchTo(oldCtx);
+    //             return true;
+    //         }
+    //     }
+    //     else {
+    //         // std::cout << "search_number is nil hnsw scan end and return false count : " << count << std::endl;
+    //         MemoryContextSwitchTo(oldCtx);
+    //         reuse_computation = true;
+    //         if (need_to_search == false)
+    //         {
+    //             return false;
+    //         }
+    //     }
+    // }
 
     if (scanState->first)
     {
+        MemoryContext oldCtx = MemoryContextSwitchTo(CacheMemoryContext);
+        std::cout << "hnsw scan start" << std::endl;
+        
+        // Deep free existing search_number and search_distance lists
+        if (search_number != NIL) {
+            // std::cout << "search_number size in scanState->first: " << list_length(search_number) << std::endl;
+            list_free(search_number);
+            search_number = NIL;
+        }
+        if (search_distance != NIL) {
+            // std::cout << "search_distance size in scanState->first: " << list_length(search_distance) << std::endl;
+            list_free(search_distance);
+            search_distance = NIL;
+        }
+        MemoryContextSwitchTo(oldCtx);
        scanState->workSpace = new HNSWIndexScan::WorkSpace();
        std::string path = std::string(DataDir) + std::string("/") +
                         std::string(DatabasePath) + std::string("/") +
@@ -303,11 +389,12 @@ bool hnsw_gettuple(IndexScanDesc scan, ScanDirection dir)
         }
         scan->xs_inorder = false;
         scanState->first = false;
+        
     }
 
     int i = 0;
     //TODO(Qianxi): set parameter
-    int distanceThreshold = 3;
+    int distanceThreshold = 4;
     int queueThreshold = 50;
     while(true)
     {
@@ -345,6 +432,10 @@ bool hnsw_gettuple(IndexScanDesc scan, ScanDirection dir)
                 i++;
                 if (scanState->inRange && i >= distanceThreshold)
                 {
+                    // std::cout << "search number size: "
+                    //           << list_length(search_number) << std::endl;
+                    // std::cout << "search distance size: "
+                    //           << list_length(search_distance) << std::endl;
                     return false;
                 }
                 else
@@ -374,6 +465,12 @@ bool hnsw_gettuple(IndexScanDesc scan, ScanDirection dir)
         }
 
         std::uint64_t number = result->GetLabel();
+        // if (reuse_computation == true) {
+        //     MemoryContext oldCtx = MemoryContextSwitchTo(CacheMemoryContext);
+        //     search_number = lappend_uint64(search_number, number);
+        //     search_distance = lappend(search_distance, (void*)Float4GetDatum(result->GetDistance()));
+        //     MemoryContextSwitchTo(oldCtx);
+        // }
         BlockNumber blkno = (std::uint32_t) (number >> 32);
         OffsetNumber offset = (std::uint32_t) number;
     #if PG_VERSION_NUM >= 120000
@@ -393,6 +490,12 @@ bool hnsw_gettuple(IndexScanDesc scan, ScanDirection dir)
  */
 void hnsw_endscan(IndexScanDesc scan)
 {
+    // if (need_to_search == false)
+    // {
+    //     need_to_search = true;
+    //     // count = 0;
+    //     return;
+    // }
     HNSWScanOpaque scanState = (HNSWScanOpaque) scan->opaque;
     HNSWIndexScan::EndScan(scanState->workSpace->resultIterator);
     scanState->workSpace->resultIterator = nullptr;
diff --git a/src/hnswindex_scan.cpp b/src/hnswindex_scan.cpp
index 9f79e99..34918aa 100644
--- a/src/hnswindex_scan.cpp
+++ b/src/hnswindex_scan.cpp
@@ -5,7 +5,6 @@
 
 std::map<std::string, std::shared_ptr<hnswlib::SpaceInterface<float>>> HNSWIndexScan::distanceFunction_map;
 std::map<std::string, std::shared_ptr<hnswlib::HierarchicalNSW<float>>> HNSWIndexScan::vector_index_map;
-
 void HNSWIndexScan::LoadIndex(const std::string &p_path,
                               DistanceMethod distance_method,
                               int dim)
@@ -26,6 +25,7 @@ void HNSWIndexScan::LoadIndex(const std::string &p_path,
         }
         auto vector_index = std::make_shared<hnswlib::HierarchicalNSW<float>>(
             distanceFunction.get(), p_path);
+        vector_index->setEf(400);
         distanceFunction_map.insert(std::make_pair(p_path,distanceFunction));
         vector_index_map.insert(std::make_pair(p_path,vector_index));
     }
diff --git a/src/index.cpp b/src/index.cpp
index cf4741c..a54af64 100644
--- a/src/index.cpp
+++ b/src/index.cpp
@@ -138,7 +138,7 @@ IndexScanDesc sptag_begin_scan(Relation index, int nkeys, int norderbys)
     std::string path = std::string(DataDir) + std::string("/") +
         std::string(DatabasePath) + std::string("/") +
         std::string(RelationGetRelationName(index));
-    IndexScan::LoadIndex(path);
+        SPTAGIndexScan::LoadIndex(path);
 
     IndexScanDesc scan = RelationGetIndexScan(index, nkeys, norderbys);
 
@@ -163,7 +163,7 @@ void sptag_rescan(IndexScanDesc scan,
 
     if (scanState->workSpace != nullptr)
     {
-        IndexScan::EndScan(scanState->workSpace->resultIterator);
+        SPTAGIndexScan::EndScan(scanState->workSpace->resultIterator);
         scanState->data->Clear();
         delete scanState->data;
         scanState->workSpace->resultIterator = nullptr;
@@ -195,7 +195,7 @@ bool sptag_gettuple(IndexScanDesc scan, ScanDirection dir)
 
     if (scanState->first)
     {
-        scanState->workSpace = new IndexScan::WorkSpace();
+        scanState->workSpace = new SPTAGIndexScan::WorkSpace();
 	    scanState->data = new SPTAG::ByteArray();
 
         if (scan->orderByData == NULL)
@@ -232,7 +232,7 @@ bool sptag_gettuple(IndexScanDesc scan, ScanDirection dir)
         std::string path = std::string(DataDir) + std::string("/") +
             std::string(DatabasePath) + std::string("/") +
             std::string(RelationGetRelationName(scan->indexRelation));
-        scanState->workSpace->resultIterator = IndexScan::BeginScan(scanState->data->Data(),path);
+        scanState->workSpace->resultIterator = SPTAGIndexScan::BeginScan(scanState->data->Data(),path);
         scanState->first = false;
     }
 
@@ -242,7 +242,7 @@ bool sptag_gettuple(IndexScanDesc scan, ScanDirection dir)
     int threshold = 5;
     while(true)
     {
-        bool validResult = IndexScan::GetNet(scanState->workSpace->resultIterator, result);
+        bool validResult = SPTAGIndexScan::GetNet(scanState->workSpace->resultIterator, result);
         if (!validResult)
         {
             return false;
@@ -290,7 +290,7 @@ bool sptag_gettuple(IndexScanDesc scan, ScanDirection dir)
 void sptag_endscan(IndexScanDesc scan)
 {
     SPTAGScanOpaque scanState = (SPTAGScanOpaque) scan->opaque;
-    IndexScan::EndScan(scanState->workSpace->resultIterator);
+    SPTAGIndexScan::EndScan(scanState->workSpace->resultIterator);
     scanState->data->Clear();
     delete scanState->data;
     scanState->workSpace->resultIterator = nullptr;
diff --git a/src/index.hpp b/src/index.hpp
index acd0562..10e8eb2 100644
--- a/src/index.hpp
+++ b/src/index.hpp
@@ -17,6 +17,8 @@ extern "C"
 
 extern "C"
 {
+    extern bool reuse_computation;
+    
     typedef enum sptag_DistCalcMethod
     {
 	    sptag_Inner_Product,
@@ -39,7 +41,7 @@ extern "C"
         bool inRange;
         float range;
         SPTAG::ByteArray *data;
-        IndexScan::WorkSpace *workSpace;
+        SPTAGIndexScan::WorkSpace *workSpace;
     } SPTAGScanOpaqueData;
 
     typedef SPTAGScanOpaqueData *SPTAGScanOpaque;
diff --git a/src/index_scan.cpp b/src/index_scan.cpp
index 7ec466b..844dc13 100644
--- a/src/index_scan.cpp
+++ b/src/index_scan.cpp
@@ -4,9 +4,9 @@
 #include "index_scan.hpp"
 
 
-std::map<std::string, std::shared_ptr<SPTAG::VectorIndex>> IndexScan::vector_index_map;
+std::map<std::string, std::shared_ptr<SPTAG::VectorIndex>> SPTAGIndexScan::vector_index_map;
 
-void IndexScan::LoadIndex(const std::string &p_path)
+void SPTAGIndexScan::LoadIndex(const std::string &p_path)
 {
     if(vector_index_map.find(p_path)==vector_index_map.end())
     {
@@ -16,19 +16,19 @@ void IndexScan::LoadIndex(const std::string &p_path)
     }
 }
 
-std::shared_ptr<SPTAG::ResultIterator> IndexScan::BeginScan(
+std::shared_ptr<SPTAG::ResultIterator> SPTAGIndexScan::BeginScan(
     const void *p_target, const std::string &p_path)
 {
     return vector_index_map[p_path]->GetIterator(p_target);
 }
 
-bool IndexScan::GetNet(std::shared_ptr<SPTAG::ResultIterator> &resultIterator,
+bool SPTAGIndexScan::GetNet(std::shared_ptr<SPTAG::ResultIterator> &resultIterator,
                    SPTAG::BasicResult &result)
 {
     return resultIterator->Next(result);
 }
 
-void IndexScan::EndScan(std::shared_ptr<SPTAG::ResultIterator> &resultIterator)
+void SPTAGIndexScan::EndScan(std::shared_ptr<SPTAG::ResultIterator> &resultIterator)
 {
     resultIterator->Close();
 }
diff --git a/src/index_scan.hpp b/src/index_scan.hpp
index 6227cd6..444586e 100644
--- a/src/index_scan.hpp
+++ b/src/index_scan.hpp
@@ -10,7 +10,7 @@
 #include <atomic>
 #include <map>
 
-class IndexScan
+class SPTAGIndexScan
 {
 public:
     struct WorkSpace
diff --git a/src/lib.cpp b/src/lib.cpp
index 9bcb290..0a6adec 100644
--- a/src/lib.cpp
+++ b/src/lib.cpp
@@ -18,6 +18,904 @@ extern "C"
     PG_MODULE_MAGIC;
     PGDLLEXPORT void _PG_init(void);
 }
+extern "C"
+{
+
+    #include "utils/syscache.h"
+    #include "catalog/pg_class.h"
+    #include "catalog/pg_am.h"
+    #include "catalog/namespace.h"
+    #include "executor/spi.h"
+    #include "optimizer/planner.h"
+    #include "executor/executor.h"
+    #include "nodes/plannodes.h"
+    #include "commands/defrem.h"
+    #include "access/relation.h"
+    #include "optimizer/paths.h"
+    #include "catalog/index.h"
+    #include "nodes/makefuncs.h"
+    #include "tcop/tcopprot.h"
+    #include "parser/parser.h"
+    #include "optimizer/cost.h"
+    #include "optimizer/optimizer.h"
+    #include "utils/ruleutils.h"
+    #include "parser/parsetree.h"
+    #include "utils/syscache.h"
+    #include "float.h"
+    #include "utils/builtins.h"
+    #include "access/parallel.h"
+    #include "optimizer/cost.h"
+    #include <executor/execdesc.h>
+}
+
+typedef struct VectorSearchResult
+{
+	Node *node;
+	Oid oid;
+	float4 original_tuples;
+	float4 processed_tuples;
+	QueryDesc *queryDesc;
+}		VectorSearchResult;
+
+
+
+
+/* Planner and Execution */
+static PlannedStmt *vbase_plan_planner(Query *parse, const char *query_string, int cursorOptions, ParamListInfo boundParams);
+static void vbase_ExecutorRun(QueryDesc *queryDesc, ScanDirection direction, uint64 count, bool execute_once);
+static void vbase_ExecutorEnd(QueryDesc *queryDesc);
+static void vbase_set_baserel_rows_estimate_hook(PlannerInfo *root, RelOptInfo *rel);
+
+/* Vector Index and Search */
+static bool check_for_vector_search(QueryDesc *queryDesc, Node *node);
+static bool check_vector_range_query(PlannerInfo *root, RelOptInfo *rel);
+static bool has_vector_column(PlannerInfo *root, RelOptInfo *rel);
+static PlannedStmt *CreatePlannedStmtForVectorSearchNodes(QueryDesc *queryDesc, List *hnswNodes);
+
+/* Cardinality Estimation and Sampling */
+static double estimate_cardinality_with_sampling(double total_rows);
+static void get_true_cardinality_for_vector_query(QueryDesc *queryDesc, PlanState *planstate);
+static double get_relation_row_count(QueryDesc *queryDesc, Index scanrelid);
+static char *get_tablename_from_scan(QueryDesc *queryDesc, Index scanrelid);
+
+/* Query Analysis and Table Counting */
+static void count_total_tables(Query *query, int *table_count);
+static void count_tables_in_quals(Node *quals, int *table_count);
+
+/* Query Error Learning and Update */
+static void load_qerrors_array(const char *table_name, Datum *Qerrors_array, int *Qerrors_count, float8 *sample_size, float8 *v_grad, float8 *learning_rate);
+static void update_qerrors_array(const char *table_name, Datum *Qerrors_array, int Qerrors_count, float8 sample_size, float8 v_grad, float8 learning_rate);
+static int compare_float8(const void *a, const void *b);
+static float8 get_median(Datum *Qerrors_array, int length);
+
+static planner_hook_type prev_planner = NULL;
+static ExecutorRun_hook_type prev_ExecutorRun = NULL;
+static ExecutorEnd_hook_type prev_ExecutorEnd = NULL;
+static set_baserel_rows_estimate_hook_type prev_rows_est_hook = NULL;
+
+static Query *original_query = NULL;
+static char *original_query_string = NULL;
+static int original_cursorOptions = 0;
+static ParamListInfo original_boundParams = NULL;
+static bool is_first_execution = true;
+static bool need_vector_cardinality_estimation = false;
+static bool ordering_needed = false;
+static bool is_sampling_active = false;
+
+static PlannedStmt *originalPlannedStmt;
+static PlannedStmt *original_es_plannedstmt;
+static PlannedStmt *newPlannedStmt;
+
+
+static List *vector_cardinality_results;
+static Oid hnswOid = 0;
+static Oid vectorOid = 0;
+
+static char *vector_table_name = NULL;
+static char *vector_column_name = NULL;
+static char *vector_str = NULL;
+static double model_estimated_rows = -1.0;
+static double estimated_sample_rows = -1.0;
+static bool is_vector_range_query = false;
+
+bool reuse_computation = false;
+
+static bool allow_sample_size_update = true;
+// static bool should_update_sample_size = false;
+static float8 sample_size = 385;
+static int sample_update_cycle = 50;
+static double learning_rate = 0.1;
+static double lr_lambda = 0.99;
+static double momentum = 0.9;
+static double true_cardinality = 0.0;
+static double vector_table_size = 0.0;
+static double alpha = 50;
+static double beta = 1.5;
+static double v_grad = 0;
+static Datum *Qerrors_array = NULL;
+static int Qerrors_count = 0;
+
+extern void (*set_baserel_rows_estimate_hook)(PlannerInfo *root, RelOptInfo *rel);
+
+
+
+static PlannedStmt *
+vbase_plan_planner(Query *parse, const char *query_string, int cursorOptions, ParamListInfo boundParams)
+{
+	PlannedStmt *result;
+	if (hnswOid == 0)
+	{
+		hnswOid = get_index_am_oid("hnsw", true);
+	}
+
+	if (vectorOid == 0)
+	{
+		vectorOid = TypenameGetTypid("_float8");
+	}
+
+	if (Qerrors_array == NULL) 
+	{
+        Qerrors_array = (Datum *)palloc(sizeof(Datum) * sample_update_cycle);
+		for (int i = 0; i < sample_update_cycle; i++)
+		{
+			Qerrors_array[i] = Float8GetDatum(0.0);
+		}
+	}
+
+	int table_count = 0;
+    count_total_tables(parse, &table_count);
+    // elog(LOG, "Total tables in query: %d", table_count);
+	if (table_count > 2)
+	{
+		MemoryContext oldCtx = MemoryContextSwitchTo(TopMemoryContext);
+		ordering_needed = true;
+		original_query = (Query *)copyObject(parse);
+		original_query_string = (char *)query_string;
+		original_cursorOptions = cursorOptions;
+		original_boundParams = boundParams;
+		MemoryContextSwitchTo(oldCtx);
+	}
+    
+    // elog(LOG, "prev_planner: %p", prev_planner);
+	if (prev_planner)
+	{
+		result = prev_planner(parse, query_string, cursorOptions, boundParams);
+	}
+	else
+	{
+		result = standard_planner(parse, query_string, cursorOptions, boundParams);
+	}
+	return result;
+}
+
+
+static void
+vbase_ExecutorRun(QueryDesc *queryDesc, ScanDirection direction,
+                     uint64 count, bool execute_once)
+{	
+	if (is_first_execution && need_vector_cardinality_estimation)
+	{
+		if (IsParallelWorker())
+			return;
+
+		vector_cardinality_results = NIL;
+		is_first_execution = false;
+		Plan *planTree = queryDesc->plannedstmt->planTree;
+		// find vector search nodes and estimate cardinality
+		bool other_node_exists = check_for_vector_search(queryDesc, (Node *) planTree);
+		if (vector_cardinality_results)
+		{
+			// replan with estimated cardinality
+			if (prev_planner)
+			{
+				newPlannedStmt = prev_planner(original_query, original_query_string, original_cursorOptions, original_boundParams);
+			}
+			else
+			{
+				newPlannedStmt = standard_planner(original_query, original_query_string, original_cursorOptions, original_boundParams);
+			}
+			reuse_computation = false;
+			originalPlannedStmt = queryDesc->plannedstmt;
+			original_es_plannedstmt = queryDesc->estate->es_plannedstmt;
+			queryDesc->plannedstmt = newPlannedStmt;
+            queryDesc->estate->es_plannedstmt = newPlannedStmt;
+            ExecutorFinish(queryDesc);
+            if (prev_ExecutorEnd)
+				prev_ExecutorEnd(queryDesc);
+			else
+				standard_ExecutorEnd(queryDesc);
+            // std::cout << "ExecutorStart with new planned statement" << std::endl;
+            ExecutorStart(queryDesc, 0);
+			need_vector_cardinality_estimation = false;
+			// execute with optimal plan
+			standard_ExecutorRun(queryDesc, direction, count, execute_once);
+            // std::cout << "ExecutorRun with new planned statement" << std::endl;
+		}
+		else
+		{
+			if (prev_ExecutorRun)
+				prev_ExecutorRun(queryDesc, direction, count, execute_once);
+			else
+				standard_ExecutorRun(queryDesc, direction, count, execute_once);
+			return;
+		}
+	}
+	else
+	{
+		if (prev_ExecutorRun)
+			prev_ExecutorRun(queryDesc, direction, count, execute_once);
+		else
+			standard_ExecutorRun(queryDesc, direction, count, execute_once);
+		return;
+	}
+}
+
+
+static void 
+vbase_ExecutorEnd(QueryDesc *queryDesc)
+{
+    // std::cout << "vbase_ExecutorEnd called" << std::endl;
+    // std::cout << "is_first_execution: " << is_first_execution << std::endl;
+    // std::cout << "need_vector_cardinality_estimation: " << need_vector_cardinality_estimation << std::endl;
+	if (is_first_execution)
+	{
+		ordering_needed = false;
+		need_vector_cardinality_estimation = false;
+		model_estimated_rows = -1.0;
+		estimated_sample_rows = -1.0;
+	}
+	else if (is_first_execution == false && need_vector_cardinality_estimation == false)
+	{
+		// update sample size
+		if (estimated_sample_rows != -1.0 && allow_sample_size_update == true)
+		{
+			get_true_cardinality_for_vector_query(queryDesc, queryDesc->planstate);
+			double Q_error = Max(estimated_sample_rows / true_cardinality, true_cardinality / estimated_sample_rows);
+			Qerrors_array[Qerrors_count] = Float8GetDatum(Q_error);
+			if (Qerrors_count == sample_update_cycle - 1)
+			{
+				double median_qerror = get_median(Qerrors_array, sample_update_cycle);
+				double grad = alpha * (median_qerror - beta) - (100-alpha) * (sample_size / vector_table_size);
+				v_grad = momentum * v_grad + learning_rate * grad;
+				learning_rate = learning_rate * lr_lambda;
+				sample_size = sample_size + v_grad;
+
+			}
+			Qerrors_count++;
+			if (Qerrors_count == sample_update_cycle)
+			{
+				Qerrors_count = 0;
+			}
+			estimated_sample_rows = -1.0;
+			update_qerrors_array(vector_table_name, Qerrors_array, Qerrors_count, sample_size, v_grad, learning_rate);
+		}
+		ordering_needed = false;
+		list_free_deep(vector_cardinality_results);
+		vector_cardinality_results = NIL;
+		is_first_execution = true;
+		model_estimated_rows = -1.0;
+		
+        
+		is_vector_range_query = false;
+		reuse_computation = true;
+	}
+    // std::cout << "middle of vbase_ExecutorEnd" << std::endl;
+    // std::cout << "prev_ExecutorEnd: " << prev_ExecutorEnd << std::endl;
+    // standard_ExecutorEnd(queryDesc);
+	if (prev_ExecutorEnd)
+    {
+        // std::cout << "Calling prev_ExecutorEnd" << std::endl;
+		prev_ExecutorEnd(queryDesc);
+        // std::cout << "prev_ExecutorEnd called" << std::endl;
+    }
+	else
+    {
+        // std::cout << "calling standard_ExecutorEnd" << std::endl;
+		standard_ExecutorEnd(queryDesc);
+        // std::cout << "standard_ExecutorEnd called" << std::endl;
+    }
+
+    // std::cout << "vbase_ExecutorEnd finished" << std::endl;
+}
+
+
+static void
+vbase_set_baserel_rows_estimate_hook(PlannerInfo *root, RelOptInfo *rel)
+{
+	if (has_vector_column(root, rel))
+	{
+        // std::cout << "table has vector column" << std::endl;
+        // std::cout << "is_first_execution: " << is_first_execution << " ordering_needed: " << ordering_needed << " is_vector_range_query: " << is_vector_range_query<< std::endl;
+		if (is_first_execution && ordering_needed && !is_sampling_active)
+		{
+            is_vector_range_query = check_vector_range_query(root, rel);
+            if (is_vector_range_query)
+            {
+                need_vector_cardinality_estimation = true;
+            }
+		}
+		else if (!is_first_execution)
+		{
+			if (vector_cardinality_results)
+			{
+				Oid relid = root->simple_rte_array[rel->relid]->relid;
+				ListCell *lc;
+				// get results of vector search cardinality estimation
+				foreach(lc, vector_cardinality_results)
+				{
+					VectorSearchResult *result = (VectorSearchResult *) lfirst(lc);
+					Oid tableoid = result->oid;
+					if (tableoid == relid)
+					{
+						rel->rows = clamp_row_est(result->processed_tuples);
+						return;
+					}
+				}
+			}
+			
+		}
+	}
+
+	set_baserel_rows_estimate_standard(root, rel);
+}
+
+
+static bool
+check_for_vector_search(QueryDesc *queryDesc, Node *node)
+{
+	bool other_node_exists = false;
+	int vector_tuples_processed = 0;
+    if (node == NULL)
+	{
+		return false;
+	}
+        
+	Plan *plan = (Plan *)node;
+	
+    if (IsA(node, IndexScan) || IsA(node, IndexOnlyScan))
+    {
+        IndexScan *indexScan = (IndexScan *) node;
+        Oid indexid = indexScan->indexid;
+
+        Relation indexRel = relation_open(indexid, NoLock);
+        Oid indexAmOid = indexRel->rd_rel->relam;
+		relation_close(indexRel, AccessShareLock);
+        // check if the index is HNSW index
+        if (indexAmOid == hnswOid)
+        {
+			Oid tableoid = IndexGetRelation(indexid, true);
+			reuse_computation = true;
+			List *hnswNodes = NIL;
+			hnswNodes = lappend(hnswNodes, node);
+			// execute HNSW vector search
+			PlannedStmt *hnswPlannedStmt = CreatePlannedStmtForVectorSearchNodes(queryDesc, hnswNodes);
+			QueryDesc *hnswQueryDesc = CreateQueryDesc(hnswPlannedStmt,
+													queryDesc->sourceText,
+													queryDesc->snapshot,
+													queryDesc->crosscheck_snapshot,
+													None_Receiver,
+													queryDesc->params,
+													queryDesc->queryEnv,
+													0);
+			ExecutorStart(hnswQueryDesc, 0);
+			ExecutorRun(hnswQueryDesc, ForwardScanDirection, 0L, true);
+			vector_tuples_processed = hnswQueryDesc->estate->es_processed;
+            VectorSearchResult *hnswResult = (VectorSearchResult *)palloc(sizeof(VectorSearchResult));
+			hnswResult->node = node;
+			hnswResult->oid = tableoid;
+			hnswResult->processed_tuples = vector_tuples_processed;
+			vector_cardinality_results = lappend(vector_cardinality_results, hnswResult);
+            // elog(LOG, "HNSW vector search processed %d tuples for table %s", vector_tuples_processed, get_rel_name(tableoid));
+			ExecutorFinish(hnswQueryDesc);
+			if (prev_ExecutorEnd)
+				prev_ExecutorEnd(hnswQueryDesc);
+			else
+				standard_ExecutorEnd(hnswQueryDesc);
+			FreeQueryDesc(hnswQueryDesc);
+
+			return other_node_exists;
+        }
+		else
+		{
+			other_node_exists = true;
+		}
+    }
+	else if (IsA(node, SubqueryScan))
+	{
+		SubqueryScan *subqueryScanNode = (SubqueryScan *) node;
+		
+		if (check_for_vector_search(queryDesc, (Node *) subqueryScanNode->subplan))
+			other_node_exists = true;
+	}
+	else if (IsA(node, SeqScan))
+	{
+		SeqScan *seqScanNode = (SeqScan *) node;
+
+		RangeTblEntry *rte = rt_fetch(seqScanNode->scanrelid, queryDesc->estate->es_range_table);
+        
+		Oid tableoid = rte->relid;
+
+		Relation seqScanRel = relation_open(tableoid, AccessShareLock);
+		char *tableName = get_rel_name(tableoid);
+		// execute sampling for vector table
+		if (strcmp(tableName, vector_table_name) == 0)
+		{
+			if (is_vector_range_query)
+			{
+				
+				double total_rows = seqScanRel->rd_rel->reltuples;
+				if (allow_sample_size_update == true)
+				{
+					load_qerrors_array(vector_table_name, Qerrors_array, &Qerrors_count, &sample_size, &v_grad, &learning_rate);
+				}
+				estimated_sample_rows = estimate_cardinality_with_sampling(total_rows);
+                VectorSearchResult *sampling_result = (VectorSearchResult *)palloc(sizeof(VectorSearchResult));
+				sampling_result->node = node;
+				sampling_result->oid = tableoid;
+				sampling_result->processed_tuples = estimated_sample_rows;
+				vector_cardinality_results = lappend(vector_cardinality_results, sampling_result);
+			}
+		}
+		else {
+			other_node_exists = true;
+		}
+		relation_close(seqScanRel, AccessShareLock);
+
+		return other_node_exists;
+	}
+	else
+	{
+		other_node_exists = true;
+	}
+
+    if (check_for_vector_search(queryDesc, (Node *) plan->lefttree))
+		other_node_exists = true;
+
+    if (check_for_vector_search(queryDesc, (Node *) plan->righttree))
+		other_node_exists = true;
+
+    return other_node_exists;
+}
+
+
+static bool
+check_vector_range_query(PlannerInfo *root, RelOptInfo *rel)
+{
+    // elog(LOG, "Checking for vector range query in relation %s", get_rel_name(rel->relid));
+    bool vector_range_query = false;
+    RangeTblEntry *rte;
+    Oid relid = root->simple_rte_array[rel->relid]->relid;
+
+    ListCell *lc;
+    foreach(lc, rel->baserestrictinfo)
+    {
+        RestrictInfo *rinfo = (RestrictInfo *) lfirst(lc);
+        Expr *clause = rinfo->clause;
+
+        if (IsA(clause, OpExpr))
+        {
+            OpExpr *opexpr = (OpExpr *) clause;
+            Oid opno = opexpr->opno;
+            const char *opname = get_opname(opno);
+            // elog(LOG, "Checking operator %s for vector range query", opname);
+
+            // vbase: only support <<->> or <<*>> as distance range filter
+            if (strcmp(opname, "<<->>") == 0 || strcmp(opname, "<<*>>") == 0)
+            {
+                // elog(LOG, "Vector range query detected with operator %s", opname);
+                // left_expr: vector column, right_expr: constant (vector literal)
+                Expr *left_expr = (Expr *) linitial(opexpr->args);
+                Expr *right_expr = (Expr *) lsecond(opexpr->args);
+
+                if (IsA(left_expr, Var) && IsA(right_expr, Const))
+                {
+                    // elog(LOG, "Vector range query with Var and Const expressions");
+                    Var *var = (Var *) left_expr;
+                    Const *const_val = (Const *) right_expr;
+
+                    rte = planner_rt_fetch(var->varno, root);
+                    vector_column_name = get_rte_attribute_name(rte, var->varattno);
+
+                    if (const_val->consttype == vectorOid)
+                    {
+                        vector_str = DatumGetPointer(const_val->constvalue);
+                        vector_table_name = get_rel_name(relid);
+                        // 거리 임계값은 vector literal의 첫 번째 값
+                        // (파싱 필요시 추가 구현)
+                        vector_range_query = true;
+                        // elog(LOG, "Vector range query detected on table %s with column %s and vector %s", vector_table_name, vector_column_name, vector_str);
+                    }
+                    else {
+                        // elog(LOG, "Expected vector literal for right expression, but got type %s", format_type_be(const_val->consttype));
+                    }
+                }
+            }
+        }
+    }
+    return vector_range_query;
+}
+
+
+static bool
+has_vector_column(PlannerInfo *root, RelOptInfo *rel)
+{
+    RangeTblEntry *rte = root->simple_rte_array[rel->relid];
+	if (rte == NULL || rte->rtekind != RTE_RELATION)
+    {
+        return false;
+    }
+    Oid relid = rte->relid;
+    Relation relation;
+    TupleDesc tupleDesc;
+    bool has_vector = false;
+
+    relation = relation_open(relid, AccessShareLock);
+    tupleDesc = RelationGetDescr(relation);
+    for (int i = 0; i < tupleDesc->natts; i++)
+    {
+        Form_pg_attribute attr = TupleDescAttr(tupleDesc, i);
+
+        if (!attr->attisdropped)
+        {
+            if (attr->atttypid == vectorOid)
+            {
+                has_vector = true;
+                break;
+            }
+        }
+    }
+
+    /* Close the relation */
+    relation_close(relation, AccessShareLock);
+    return has_vector;
+}
+
+
+static PlannedStmt *
+CreatePlannedStmtForVectorSearchNodes(QueryDesc *queryDesc, List *hnswNodes)
+{
+    PlannedStmt *newPlannedStmt = makeNode(PlannedStmt);
+
+    newPlannedStmt->commandType = CMD_SELECT;  
+    newPlannedStmt->queryId = queryDesc->plannedstmt->queryId;
+    newPlannedStmt->hasReturning = false;
+    newPlannedStmt->hasModifyingCTE = false;
+    newPlannedStmt->canSetTag = true;
+    newPlannedStmt->transientPlan = false;
+    newPlannedStmt->dependsOnRole = false;
+    newPlannedStmt->parallelModeNeeded = false;
+
+    Plan *topPlan = (Plan *) linitial(hnswNodes);
+    newPlannedStmt->planTree = topPlan;
+
+    newPlannedStmt->rtable = queryDesc->plannedstmt->rtable;
+    newPlannedStmt->subplans = NIL;
+    newPlannedStmt->resultRelations = NIL;
+    newPlannedStmt->rowMarks = NIL;
+    newPlannedStmt->relationOids = queryDesc->plannedstmt->relationOids;
+    newPlannedStmt->invalItems = queryDesc->plannedstmt->invalItems;
+	// newPlannedStmt->permInfos = queryDesc->plannedstmt->permInfos;
+    return newPlannedStmt;
+}
+
+
+static double
+estimate_cardinality_with_sampling(double total_rows)
+{
+    StringInfoData query;
+    int ret;
+    double count_result = 0.0;
+    bool isnull;
+    is_sampling_active = true;
+
+    initStringInfo(&query);
+
+    double sample_ratio = sample_size / total_rows * 100;
+    appendStringInfo(&query,
+                     "SELECT COUNT(*)::float FROM (SELECT %s FROM %s TABLESAMPLE SYSTEM(%f)) p "
+                     "WHERE p.%s <<->> '%s';",
+                     vector_column_name, vector_table_name, sample_ratio,
+                     vector_column_name, vector_str);
+
+    SPI_connect();
+    ret = SPI_execute(query.data, true, 0);
+
+    if (ret != SPI_OK_SELECT)
+    {
+        SPI_finish();
+    }
+
+    if (SPI_processed > 0)
+    {
+        TupleDesc tupdesc = SPI_tuptable->tupdesc;
+        HeapTuple tuple = SPI_tuptable->vals[0];
+        Datum count_datum = SPI_getbinval(tuple, tupdesc, 1, &isnull);
+
+        if (!isnull)
+        {
+            count_result = DatumGetFloat8(count_datum);
+        }
+    }
+
+    SPI_finish();
+
+    pfree(query.data);
+    is_sampling_active = false;
+
+    if (count_result == 0)
+    {
+        count_result = 1;
+    }
+
+    count_result = count_result / sample_ratio * 100;
+
+    return count_result;
+}
+
+
+static void 
+get_true_cardinality_for_vector_query(QueryDesc *queryDesc, PlanState *planstate) 
+{
+    if (planstate == NULL) {
+        return;
+    }
+
+    Plan *plan = planstate->plan;
+    Instrumentation *instrument = planstate->instrument;
+
+    if (IsA(plan, SeqScan) || IsA(plan, IndexScan) || IsA(plan, BitmapHeapScan)) {
+        char *relname = get_tablename_from_scan(queryDesc, ((Scan *)plan)->scanrelid);
+
+		if (strcmp(relname, vector_table_name) == 0){
+			true_cardinality = instrument->ntuples;
+			if (vector_table_size == 0.0)
+			{
+				vector_table_size = get_relation_row_count(queryDesc, ((Scan *)plan)->scanrelid);
+			}
+			return;
+		}
+    }
+
+    if (outerPlanState(planstate)) {
+        get_true_cardinality_for_vector_query(queryDesc, outerPlanState(planstate));
+    }
+    if (innerPlanState(planstate)) {
+        get_true_cardinality_for_vector_query(queryDesc, innerPlanState(planstate));
+    }
+
+}
+
+
+static double 
+get_relation_row_count(QueryDesc *queryDesc, Index scanrelid) 
+{
+    if (queryDesc == NULL || queryDesc->plannedstmt == NULL || queryDesc->plannedstmt->rtable == NULL) {
+        // elog(WARNING, "Invalid QueryDesc or scanrelid");
+        return 0.0;
+    }
+
+    List *rtable = queryDesc->plannedstmt->rtable;
+    if (scanrelid == 0 || scanrelid > list_length(rtable)) {
+        // elog(WARNING, "Invalid scanrelid: %u", scanrelid);
+        return 0.0;
+    }
+
+    RangeTblEntry *rte = (RangeTblEntry *)list_nth(rtable, scanrelid - 1);
+
+    if (rte == NULL || rte->relid == InvalidOid) {
+        // elog(WARNING, "RangeTblEntry not found or invalid relid for scanrelid: %u", scanrelid);
+        return 0.0;
+    }
+
+    Oid relid = rte->relid;
+    HeapTuple tuple;
+    Form_pg_class relform;
+    double row_count = 0.0;
+
+    tuple = SearchSysCache1(RELOID, ObjectIdGetDatum(relid));
+    if (HeapTupleIsValid(tuple)) {
+        relform = (Form_pg_class) GETSTRUCT(tuple);
+        row_count = relform->reltuples;  
+        ReleaseSysCache(tuple);
+    } else {
+        // elog(WARNING, "Relation with OID %u not found in pg_class", relid);
+    }
+
+    return row_count;
+}
+
+static char *
+get_tablename_from_scan(QueryDesc *queryDesc, Index scanrelid) 
+{
+    if (scanrelid == 0 || queryDesc->plannedstmt->rtable == NULL) {
+        return NULL;
+    }
+
+    List *rtable = queryDesc->plannedstmt->rtable;
+    RangeTblEntry *rte = (RangeTblEntry *)list_nth(rtable, scanrelid - 1);
+
+    if (rte->relid != InvalidOid) {
+        return get_rel_name(rte->relid);
+    }
+
+    return NULL;
+}
+
+
+static void 
+count_total_tables(Query *query, int *table_count)
+{
+    ListCell *lc;
+
+    foreach(lc, query->rtable)
+    {
+        RangeTblEntry *rte = (RangeTblEntry *) lfirst(lc);
+
+        if (rte->rtekind == RTE_RELATION)
+        {
+            (*table_count)++;
+        }
+		
+        else if (rte->rtekind == RTE_SUBQUERY)
+        {
+            count_total_tables(rte->subquery, table_count);
+        }
+    }
+
+    if (query->jointree && query->jointree->quals)
+    {
+        count_tables_in_quals(query->jointree->quals, table_count);
+    }
+}
+
+static void 
+count_tables_in_quals(Node *quals, int *table_count)
+{
+    if (quals == NULL)
+        return;
+
+    if (IsA(quals, SubLink))
+    {
+        SubLink *sublink = (SubLink *) quals;
+        Query *subquery = (Query *) sublink->subselect;
+        count_total_tables(subquery, table_count);
+    }
+    else if (IsA(quals, BoolExpr)) 
+    {
+        BoolExpr *bool_expr = (BoolExpr *) quals;
+        ListCell *lc;
+
+        foreach(lc, bool_expr->args)
+        {
+            Node *arg = (Node *) lfirst(lc);
+            count_tables_in_quals(arg, table_count);
+        }
+    }
+}
+
+
+static void 
+load_qerrors_array(const char *table_name, Datum *Qerrors_array, int *Qerrors_count, float8 *sample_size, float8 *v_grad, float8 *learning_rate) 
+{
+
+    SPI_connect();
+
+    char *select_query = "SELECT sample_size, recent_qerrors, qerror_count, v_grad, learning_rate FROM vbase_qerror WHERE table_name = $1";
+    Oid argtypes[1] = {TEXTOID};
+    Datum values[1] = {CStringGetTextDatum(table_name)};
+
+    int ret = SPI_execute_with_args(select_query, 1, argtypes, values, NULL, false, 0);
+
+    if (ret == SPI_OK_SELECT && SPI_processed > 0) {
+        bool isnull;
+
+        Datum sample_size_datum = SPI_getbinval(SPI_tuptable->vals[0], SPI_tuptable->tupdesc, 1, &isnull);
+        *sample_size = isnull ? 385 : DatumGetFloat8(sample_size_datum);
+
+        Datum recent_qerrors = SPI_getbinval(SPI_tuptable->vals[0], SPI_tuptable->tupdesc, 2, &isnull);
+
+        Datum qerror_count_datum = SPI_getbinval(SPI_tuptable->vals[0], SPI_tuptable->tupdesc, 3, &isnull);
+        *Qerrors_count = DatumGetInt32(qerror_count_datum);
+
+        Datum v_grad_datum = SPI_getbinval(SPI_tuptable->vals[0], SPI_tuptable->tupdesc, 4, &isnull);
+        *v_grad = isnull ? 0.0 : DatumGetFloat8(v_grad_datum);
+
+        Datum learning_rate_datum = SPI_getbinval(SPI_tuptable->vals[0], SPI_tuptable->tupdesc, 5, &isnull);
+        *learning_rate = isnull ? 0.1 : DatumGetFloat8(learning_rate_datum);
+
+        ArrayType *array = DatumGetArrayTypeP(recent_qerrors);
+        Datum *elements;
+        bool *nulls;
+        int num_elements;
+
+        deconstruct_array(array, FLOAT8OID, sizeof(float8), true, 'd', &elements, &nulls, &num_elements);
+
+        MemoryContext oldCtx = MemoryContextSwitchTo(TopMemoryContext);
+
+        for (int i = 0; i < num_elements; i++) {
+            Qerrors_array[i] = elements[i];
+        }
+
+        MemoryContextSwitchTo(oldCtx);
+
+        pfree(elements);
+    } else {
+        // elog(WARNING, "No rows found for table_name: %s", table_name);
+    }
+
+    SPI_finish();
+}
+
+static void 
+update_qerrors_array(const char *table_name, Datum *Qerrors_array, int Qerrors_count, float8 sample_size, float8 v_grad, float8 learning_rate) 
+{
+    ArrayType *array = construct_array(
+        Qerrors_array,     
+        sample_update_cycle,     
+        FLOAT8OID,         
+        sizeof(float8),    
+        true,              
+        'd'                
+    );
+
+    SPI_connect();
+
+    char *update_query = "UPDATE vbase_qerror "
+                         "SET recent_qerrors = $1, qerror_count = $2, sample_size = $3, v_grad = $4, learning_rate = $5 "
+                         "WHERE table_name = $6";
+
+    Oid argtypes[6] = {FLOAT8ARRAYOID, INT4OID, FLOAT8OID, FLOAT8OID, FLOAT8OID, TEXTOID};
+    Datum values[6] = {
+        PointerGetDatum(array),             
+        Int32GetDatum(Qerrors_count),       
+        Float8GetDatum(sample_size),        
+        Float8GetDatum(v_grad),             
+        Float8GetDatum(learning_rate),      
+        CStringGetTextDatum(table_name)     
+    };
+
+    int ret = SPI_execute_with_args(update_query, 6, argtypes, values, NULL, false, 0);
+
+    if (ret == SPI_OK_UPDATE && SPI_processed == 0) {
+        char *insert_query = "INSERT INTO vbase_qerror (recent_qerrors, qerror_count, sample_size, v_grad, learning_rate, table_name) "
+                             "VALUES ($1, $2, $3, $4, $5, $6)";
+
+        SPI_execute_with_args(insert_query, 6, argtypes, values, NULL, false, 0);
+    }
+
+    SPI_finish();
+}
+
+static int 
+compare_float8(const void *a, const void *b) 
+{
+    float8 fa = *(const float8 *)a;
+    float8 fb = *(const float8 *)b;
+    if (fa < fb) return -1;
+    if (fa > fb) return 1;
+    return 0;
+}
+
+static float8 
+get_median(Datum *Qerrors_array, int length) 
+{
+    float8 *values = (float8 *)palloc(length * sizeof(float8));
+    for (int i = 0; i < length; i++) {
+        values[i] = DatumGetFloat8(Qerrors_array[i]);
+    }
+
+    qsort(values, length, sizeof(float8), compare_float8);
+
+    float8 median;
+    if (length % 2 == 1) {
+        median = values[length / 2];
+    } else {
+        median = (values[length / 2 - 1] + values[length / 2]) / 2.0;
+    }
+
+    pfree(values);
+    return median;
+}
 
 relopt_kind sptag_para_relopt_kind;
 relopt_kind hnsw_para_relopt_kind;
@@ -39,6 +937,7 @@ relopt_enum_elt_def hnsw_DistCalcMethodValues[] =
 
 void _PG_init(void)
 {
+
     int totalCoreNum;
     totalCoreNum = omp_get_num_procs();
 
@@ -66,4 +965,49 @@ void _PG_init(void)
                         "Valid values are \"inner_product\" and \"l2_distance\".",
                         AccessExclusiveLock);
 
+
+    /* planner hook */
+    prev_planner = planner_hook;
+	planner_hook = vbase_plan_planner;
+	prev_ExecutorRun = ExecutorRun_hook;
+	ExecutorRun_hook = vbase_ExecutorRun;
+	prev_ExecutorEnd = ExecutorEnd_hook;
+	ExecutorEnd_hook = vbase_ExecutorEnd;
+    prev_rows_est_hook = set_baserel_rows_estimate_hook;
+    /* set baserel rows estimate hook */
+	set_baserel_rows_estimate_hook = vbase_set_baserel_rows_estimate_hook;
+    DefineCustomRealVariable("vector.sample_size",
+        "Sets the sample size percentage for TABLESAMPLE.",
+        "Valid range is 0..table_size.",
+        &sample_size,
+        385,   
+        1, 
+        DBL_MAX,  
+        PGC_USERSET,
+        0,
+        NULL, NULL, NULL);
+    DefineCustomIntVariable(
+        "vector.sample_update_cycle",
+        "Sets the update cycle for vector sampling.",
+        "Valid range is 1..1000.",
+        &sample_update_cycle,
+        50,    
+        1,     
+        1000,  
+        PGC_USERSET,
+        0,
+        NULL, NULL, NULL
+    );
+    DefineCustomBoolVariable(
+        "vector.update_sample_size",  
+        "Enable or disable user update of sample size.", 
+        NULL,  
+        &allow_sample_size_update,  
+        true,  
+        PGC_USERSET,  
+        0,  
+        NULL,  
+        NULL,  
+        NULL   
+    );
 }
\ No newline at end of file
diff --git a/thirdparty/Postgres b/thirdparty/Postgres
--- a/thirdparty/Postgres
+++ b/thirdparty/Postgres
@@ -1 +1 @@
-Subproject commit e849f3f1f884ad140b60a24354c6371cbd2efbb6
+Subproject commit e849f3f1f884ad140b60a24354c6371cbd2efbb6-dirty
diff --git a/thirdparty/SPTAG b/thirdparty/SPTAG
--- a/thirdparty/SPTAG
+++ b/thirdparty/SPTAG
@@ -1 +1 @@
-Subproject commit de5b7f8c57c45c31ac1caeaf3b9f1d0e1668c395
+Subproject commit de5b7f8c57c45c31ac1caeaf3b9f1d0e1668c395-dirty
diff --git a/thirdparty/hnsw b/thirdparty/hnsw
--- a/thirdparty/hnsw
+++ b/thirdparty/hnsw
@@ -1 +1 @@
-Subproject commit 443d667478fddf1e13f2e06b1da4e1ec3a9fe716
+Subproject commit 443d667478fddf1e13f2e06b1da4e1ec3a9fe716-dirty
